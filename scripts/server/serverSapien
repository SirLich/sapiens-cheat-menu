
local gameObject = mjrequire "common/gameObject"
local need = mjrequire "common/need"
local desire = mjrequire "common/desire"
local mood = mjrequire "common/mood"
local gameObjectSharedState = mjrequire "common/gameObjectSharedState"
local saveState = mjrequire "hammerstone/state/saveState"

local mod = {
	loadOrder = 1,
}

local serverGOM = nil

--creative mode
local logger = mjrequire "hammerstone/logging"



--shadow maxFollowerNeeds
local function maxSapienNeeds(sapienIDs)
    logger:log("got to custom function")
    for i,sapienID in ipairs(sapienIDs) do

        local sapien = serverGOM:getObjectWithID(sapienID)
        if sapien then
            local sharedState = sapien.sharedState
            logger:log("maxing needs for:")
            logger:log(sharedState.name)
            if sharedState and sharedState.needs then
                --get max level for moods
                local maxMoodLevel = getTableSize(moodType.descriptions)
                --to max:
                for j,needType in ipairs(need.validTypes) do
                    if sharedState.needs[needType.index] then
                        sharedState:set("needs", needType.index, 0.0)
                    else
                        logger:log("skipping invalid need type")
                    end
                    
                end
                for j,moodType in ipairs(mood.validTypes) do
                    if sharedState.moods[moodType.index] then
                        sharedState:set("moods", moodType.index, 5)
                    else
                        logger:log("skipping invalid mood type")
                    end
                end
                
                -- remove status effects
                sharedState:set("statusEffects", {})

                --to make hungry:
               -- sharedState:set("needs", need.types.food.index, 1.0)

                --to make tired:
                --sharedState:set("needs", need.types.sleep.index, 1.0)
            end

        end
    end
end

--probably should live in hammerstone framework
local function getTableSize(table)
	local count = 0
	for i, key in ipairs(table) do
		count = count + 1
	end
	return count
end

local function init()
	-- Register net function for cheats
        mod.server:registerNetFunction("maxSapienNeeds",maxSapienNeeds)
end

function mod:onload(serverSapien)
	local super_init = serverSapien.init
	serverSapien.init = function(self, serverGOM, serverWorld, serverTribe)
		super_init(self, serverGOM, serverWorld, serverTribe)
	end
    init()
end



return mod